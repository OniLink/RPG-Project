[gd_scene load_steps=8 format=2]

[ext_resource path="res://Sprites/Textbox.png" type="Texture" id=1]
[ext_resource path="res://Fonts/Normal.tres" type="DynamicFont" id=2]
[ext_resource path="res://Fonts/Bold.tres" type="DynamicFont" id=3]
[ext_resource path="res://Fonts/Monospace.tres" type="DynamicFont" id=4]
[ext_resource path="res://Fonts/BoldItalic.tres" type="DynamicFont" id=5]
[ext_resource path="res://Fonts/Italic.tres" type="DynamicFont" id=6]

[sub_resource type="GDScript" id=1]
script/source = "extends CanvasLayer


signal queue_flushed
signal point_reached

var _queue = []
var _current_state = null

var _variables = {}

var _running = false
var _running_cached = false
var _type_speed = 60

onready var DialogueBoxBG = $BoxBG
onready var DialogueName = $Name
onready var DialogueAvatar = $Box/Avatar
onready var DialogueText = $Box/Text


func _ready():
	pass


func _process( delta ):
	_running_cached = is_running()
	
	# Execute the state
	var finished = false
	var state_updated = false
	
	while not finished:
		# Continue the current state if it exists
		if _current_state is GDScriptFunctionState and _current_state.is_valid():
			_current_state = _current_state.resume( delta )
			state_updated = true
		
		# Pop a state off the queue if needed
		elif not _queue.empty():
			var next_state = _queue.pop_front()
			var args = next_state[ 1 ]
			args.push_front( delta )
			_current_state = callv( next_state[ 0 ], args )
			
			state_updated = true
			
		# If the state got yielded or the queue is flushed, we're done
		finished = ( _current_state is GDScriptFunctionState and _current_state.is_valid() ) or _queue.empty()
	
	# The queue flush signal should be emitted only once, when the last state update has finished
	if _queue.empty() and state_updated and not( _current_state is GDScriptFunctionState and _current_state.is_valid() ):
		emit_signal( \"queue_flushed\" )


#######################################
# PUBLIC API                          #
# Queues events to run asynchronously #
#######################################

# TO IMPLEMENT:
# .set_avatar( icon )
# .get_input( type, variable_name )

# Check if the dialogue engine is running
func is_running():
	return _running


# Checks if the dialogue engine is running or if it's just stopped
# Useful when you want to make sure you don't accidentally re-initiate dialogue
# if your initiate dialogue button is set to ui_accept
func is_running_or_just_stopped():
	return is_running() or _running_cached


# Start the dialogue engine
func start():
	_queue.push_back( [ \"_start_dialogue\", [] ] )


# Stop the dialogue engine
func stop():
	_queue.push_back( [ \"_stop_dialogue\", [] ] )


# Say something to the dialogue box
func say( text ):
	_queue.push_back( [ \"_say\", [ text ] ] )


# Set the name of the speaker
func set_name( name ):
	_queue.push_back( [ \"_set_name\", [ name ] ] )


# Set the current avatar. Input should be a Texture.
func set_avatar( avatar ):
	_queue.push_back( [ \"_set_avatar\", [ avatar ] ] )


# Set how fast the text is typed
func set_text_speed( speed ):
	_queue.push_back( [ \"_set_text_speed\", [ speed ] ] )


# Wait for the player to proceed, then clear the dialogue box
func proceed():
	_queue.push_back( [ \"_proceed\", [] ] )


# Wait some seconds before the dialogue continues
func wait( seconds ):
	_queue.push_back( [ \"_wait\", [ seconds ] ] )


# Emit a signal when a point is reached
func point_signal():
	_queue.push_back( [ \"_point_signal\", [] ] )


# Retrieve a variable from the internal storage
func get_variable( variable_name ):
	return _variables[ variable_name ]


# Set a variable in the internal storage
func set_variable( variable_name, value ):
	_variables[ variable_name ] = value


####################################
# PRIVATE API                      #
# Executes the asynchronous events #
####################################

func _start_dialogue( _delta ):
	_running = true
	_set_dialogue_visible( true )
	DialogueText.visible_characters = 0


func _stop_dialogue( _delta ):
	_running = false
	_set_dialogue_visible( false )


func _say( delta, text ):
	var err = DialogueText.append_bbcode( text )
	if err:
		print( \"Error in Dialogue Parsing: \" + err ) # Placeholder error checking
	var visible = DialogueText.visible_characters
	
	delta = yield() # HACK: get_total_character_count() doesn't update til the next frame
	while DialogueText.visible_characters < DialogueText.get_total_character_count():
		visible += _type_speed * delta
		DialogueText.visible_characters = floor( visible )
		delta = yield()


func _set_name( _delta, name ):
	DialogueName.text = name


func _set_avatar( _delta, avatar ):
	DialogueAvatar.set_texture( avatar )


func _set_text_speed( _delta, speed ):
	_type_speed = speed


func _proceed( _delta ):
	while( !Input.is_action_just_pressed( \"ui_accept\" ) ):
		yield()
	
	_clear_box()
	DialogueText.visible_characters = 0


func _wait( _delta, seconds ):
	# Yielding to the timer doesn't work because we try to resume the state callback each frame
	# Instead we yield as long as there's time left on the timer
	var timer = get_tree().create_timer( seconds )
	while( timer.get_time_left() > 0.0 ):
		yield()


func _point_signal( _delta ):
	emit_signal( \"point_reached\" )


# Clear the dialogue box
func _clear_box():
	DialogueText.clear()


# Set whether the dialogue is visible or not
func _set_dialogue_visible( visibility ):
	if visibility:
		DialogueBoxBG.show()
		DialogueName.show()
		DialogueAvatar.show()
		DialogueText.show()
	else:
		DialogueBoxBG.hide()
		DialogueName.hide()
		DialogueAvatar.hide()
		DialogueText.hide()
"

[node name="Dialogue" type="CanvasLayer"]
script = SubResource( 1 )

[node name="BoxBG" type="TextureRect" parent="."]
visible = false
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -144.0
texture = ExtResource( 1 )

[node name="Name" type="Label" parent="."]
visible = false
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 6.0
margin_top = -138.0
margin_right = 474.0
margin_bottom = -114.0
custom_fonts/font = ExtResource( 2 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Box" type="HBoxContainer" parent="."]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 6.0
margin_top = -102.0
margin_right = -6.0
margin_bottom = -6.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Avatar" type="TextureRect" parent="Box"]
visible = false
margin_bottom = 96.0

[node name="Text" type="RichTextLabel" parent="Box"]
visible = false
margin_left = 4.0
margin_right = 1908.0
margin_bottom = 96.0
size_flags_horizontal = 3
custom_fonts/mono_font = ExtResource( 4 )
custom_fonts/bold_italics_font = ExtResource( 5 )
custom_fonts/italics_font = ExtResource( 6 )
custom_fonts/bold_font = ExtResource( 3 )
custom_fonts/normal_font = ExtResource( 2 )
custom_colors/default_color = Color( 0, 0, 0, 1 )
bbcode_enabled = true
__meta__ = {
"_edit_use_anchors_": false
}
